# Please make a copy of this file and call it config.yaml. Make sure not to share it on GitHub, as you will need to
# add sensitive information, e.g. API token.
# Use this newly created copy to adjust all configurations.
API_token: # your token here
    IBMQ_API_token: ""
    dwave_API_token: ""

# choose backend
backend: "pypsa-glpk"
    # (string) the backend algorithm to be used. options are:
    # sqa based: "classical", "sqa", "iterative-sqa"
    # dwave based: "dwave-tabu", "dwave-greedy", "dwave-hybrid", "dwave-qpu", "dwave-read-qpu",
    # milp based: "pypsa-glpk", "pypsa-fico"
    # qiskit based: "qaoa"

# all configuration data of the QUBO model of the network
ising_interface:
    # values for specifiying network to qubit abstraction. all generator values are rounded to intgers
    generator_representation: "single_qubit"
        # (string) name of the function how to model lines with qubits
        # choose between:
        #   - single_qubit (1 qubit per generator)
        #   - integer_decomposition (binary decomposition)
        #   - with_status (binary decomposition with correct status qubit)
    line_representation: "cutpowersoftwo"
    line_representation: "fullsplit"
        # (string) name of the function how to model lines with qubits
        # choose between:
        #   - fullsplit (qubits of weight 1, -1)
        #   - cutpowersoftwo (positive and negative binary decomposition)

    # each following entry is the configuration data for one QUBO constraint
    # The kirchhoff constraint
    kirchhoff:
        scale_factor: 1.0
          # (float) weight of the kirchhoff subproblem in the QUBO
    # Adding Marginal cost optimization in the QUBO
    total_power:
        scale_factor: 1
    marginal_cost:
        range_factor: 1.0
            # (float) a linear factor to linearly scale the marginal costs per power produced
        # both following attributes set an offset of the marginal costs which in turn
        # corresponds to a target marginal cost. Target cost will take precedence.
        # There other corresponding value will be calculated such that the effective
        # target in the QUBO after the transformation is 0. This means that the actual target
        # can be calculated as: total_load * offset
        # The offset is applied before the scaling by the range factor
        offset: 1.0
          # (float) offset of the marginal cost of generators per power unit produced
        target_cost: 377.8
          # (float) estimated cost from which to encode the squared distance before
          # the linear transformation
        scale_factor: 0.1
          # (float) weight of the marginal cost optimization in the QUBO
        strategy: "global_cost_square"
        # strategy: "global_cost_square"
            # (string) name of the class/procedure how to encode the marginal cost optimization
            # choose between:
            #   - global_cost_square,
            #   - global_cost_square_with_slack,
            #   - marginal_as_penalty,
            #   - local_marginal_estimation
        ### these values only pertain the strateies "*with_slack"
        slack_type: "binary_power"
            # (string) this determines the method how slack variables weights are generated. this will generate powers of 2 as weights
            # choose between:
            #   - binary_power
        slack_scale: 0.1
            # (float) scalar factor for all slack variable weights
        slack_size: 4
            # (int) number of slack variables to be used
        ### end *with_slack
        ### these values specifiy how costs are estimated if a formulation needs it (all but MarginalAsPenalty)
        offset_factor: 1.225
           # (float) factor that determines estimate of marginal cost. A Factor 1.0 corresponds to the estimation
           # obtained by using the most efficient rate for each unit of power that is required
        # these value only pertain the strategy "local_marginal_estimation"
        line_cost_factor: -1.0
          # (double) factor how to consider line transmission in local costs
        ### end estimation config

    # This constraint turns the first qubit of each generator at at each time step into a status qubit. If the
    # generator_representation chosen is `with_status`, this will enforce the minimal output of committable generators
    minimal_power:
        scale_factor: 1.0
          # (float) weight of he enforcement. status qubit are already scaled by the weight of the power interactions of non-status qubits

snapshots: 1
    # (int) upper limit of snapshots to be considered in qubo formulation. It does so by slicing the index

qaoa_backend:
    shots: 200
        # (int) the number of shots
        # max 20,000
    simulate: True
        # (boolean) use a simulator or a QPU
        #   - True: use simulator;
        #   - False: use real IBMQ QPU (IBMQ API token required)
    noise: False
        # (boolean) simulate with or without noise (only used, when simulate is True)
        #   - True: use simulator with noise model (IBMQ API token required)
        #   - False: use simulator without noise model
    simulator: "aer_simulator"
        # (string) the qiskit simulator to be used (only used, when simulate is True)
        # choose between
        #   - qasm_simulator
        #   - aer_simulator
        #   - statevector_simulator
        #   - aer_simulator_statevector

    # supervisior determines how angles are chosen at the beginning of one experiment
    # There are two possible supervisor right now. they are grouped with the parameter
    # for choosing initial angles because the type varies for different supervisors
    strategy: "random_or_fixed"
    # (string) strategy for choosing initial angle values:
    #   - random_or_fixed
    #   - grid_search
    max_iter: 1
        # (int) maximum number iterations of the classical optimizer
    repetitions: 1
        # (int) number of experiment repetitions
    classical_optimizer: "COBYLA"
        # (string) the classical optimizer to be used
        # choose between "SPSA", "COBYLA" and "ADAM"

    ### "random_or_fixed" config guess
    # uses a list to initializes angles in one experiment, substituting the string "rand" by a random number
    strategy: "random_or_fixed"
    initial_guess: ["rand", "rand", "rand", "rand"]
        # (list of float or the string "rand") the initial guess for the classical optimizer and "random_or_fixed" strategy
        # has to be an even number of parameters starting with beta, then gamma, then beta again and so on...
        # use "rand" if a random initial guess should be used for this parameter.
    range: 6
        # (float) range of a random guess for the angle. A range of 1 will result in random guesses
        # in the intervall [-1,1]. Only applicable for random guesses

    ### "grid_search" config guess
    # grid_search takes a list of grids which are dictionary that describe the initial angles
    # of the layers. A grid dictionary contains the three keys `lower_bound`, `upper_bound` and `num_gridpoints`.
    # The default grid below is an example also defines fallback values for incomplete dictionaries
    default_grid:
        lower_bound: -3
           # (float) lowest value of the inital angle
        upper_bound: 3
           # (float) highest value of the inital angle
        num_gridpoints: 3
           # (int) number of angles to try for the current layer. If the chosen number is 1, the
           # lower_bound will be the only grid point for that layer
    strategy: "grid_search"
    initial_guess: 
      - lower_bound: 2
        upper_bound: 2
        num_gridpoints: 3
      - lower_bound: 1
        upper_bound: 1
        num_gridpoints: 3


sqa_backend:
    # seed: 722225
        # (int) The initial seed of the sqa solver which is otherwise initialized randomly
    # schedule rules can be read in the platform description `DESCRIPTION.md`
    transverse_field_schedule: "[8.0,0.0]"
        # (string) transvere field schedule of the simulation
    temperature_schedule: "[0.1,iF,0.0001]"
        # (string) temperature schedule of the simultion
    trotter_slices: 500
        # (int) number of trotter slices to be used. The trotter slices are the discretization of the
        # continous quantum state
    optimization_cycles: 400
        # (int) number of discrete time steps to model the continous evolution


dwave_backend:
    strategy: "lowest_energy"
        # (string)
        # choose between:
        #   - lowest_energy
        #   - closest_sample
    postprocess: "flow"
        # (string) determines how to improve qpu result. only flow optimization is possible
    timeout: 10
        # (int) number of seconds that an embedding into working graph can be calculated
    ### only necessary for solver dwave-qpu
    sample_origin: "results_qpu_sweep/file_containing_qpu_result"
        # (string) filename of the saved sample result file if old result is reused

    # D-Wave annealer config, see https://docs.ocean.dwavesys.com/en/stable/overview/qpu.html
    annealing_time: 1
        # (int)
    num_reads: 1
        # (int)
    chain_strength: 1
        # (int)
    programming_thermalization: 1
        # (int)
    readout_thermalization: 1
        # (int)


pypsa_backend:
    timeout: 10
        # (int) how many second the MILP is allowed to calculate a solution. after this time, an (non-optimal) solution
        # will be returned

# The following entry can also contain config data, but is used by all solvers
backend_config:
    timeout: 60
    max_iteration: 10
    # (int)
    # choose how many steps the iterative qubo algorithm can do before stopping without finding
    # a feasible solution

